{
  "duration_minutes": 45,
  "question_pool": {
    "machine_learning": [
      {
        "id": "ml_1",
        "question": "Which model works best for time series data with trends and seasonal patterns?",
        "choices": [
          "Prophet model with automatic trend and seasonality handling",
          "Random forest classifier",
          "Logistic regression with polynomial features",
          "Naive Bayes classifier"
        ],
        "answer_index": 0,
        "topic": "machine_learning"
      },
      {
        "id": "ml_2",
        "question": "In a fraud detection problem where only 0.1% of transactions are fraudulent, what is the best approach?",
        "choices": [
          "Ignore imbalance and use accuracy as the main metric",
          "Use SMOTE or weighted loss to handle class imbalance",
          "Randomly remove normal transactions to balance data",
          "Train on only fraudulent transactions"
        ],
        "answer_index": 1,
        "topic": "machine_learning"
      }
    ],
    "cloud_computing": [
      {
        "id": "cloud_1",
        "question": "Which setup helps deploy ML models on AWS with low latency and automatic scaling?",
        "choices": [
          "Host models on a single EC2 instance",
          "Upload model files to S3 and access directly",
          "Run inference scripts manually on Lambda functions",
          "Use SageMaker endpoints with autoscaling and API Gateway"
        ],
        "answer_index": 3,
        "topic": "cloud_computing"
      },
      {
        "id": "cloud_2",
        "question": "How can you keep your ML pipeline portable across multiple clouds?",
        "choices": [
          "Use one providerâ€™s MLOps tool for all workloads",
          "Build the pipeline separately for each cloud",
          "Use Kubernetes and Kubeflow for cloud-neutral MLOps",
          "Run everything locally to avoid cloud dependency"
        ],
        "answer_index": 2,
        "topic": "cloud_computing"
      }
    ],
    "artificial_intelligence": [
      {
        "id": "ai_1",
        "question": "What is a good way to make AI predictions explainable in medical diagnosis?",
        "choices": [
          "Increase model complexity to improve accuracy",
          "Use SHAP or LIME to show which features affect predictions",
          "Hide model logic for confidentiality",
          "Rely only on final prediction without interpretation"
        ],
        "answer_index": 1,
        "topic": "artificial_intelligence"
      },
      {
        "id": "ai_2",
        "question": "Which approach helps train AI agents safely in self-driving simulations?",
        "choices": [
          "Train agents to explore freely without penalties",
          "Use safe reinforcement learning that respects constraints",
          "Ignore rare crash scenarios for faster learning",
          "Randomly reset environments during training"
        ],
        "answer_index": 1,
        "topic": "artificial_intelligence"
      }
    ],
    "data_analysis": [
      {
        "id": "da_1",
        "question": "How should you handle missing values and outliers before model training?",
        "choices": [
          "Remove all rows with missing data",
          "Ignore missing values and continue",
          "Replace missing values with zeros",
          "Impute missing data and treat outliers with robust scaling"
        ],
        "answer_index": 3,
        "topic": "data_analysis"
      },
      {
        "id": "da_2",
        "question": "You have 1TB of raw data in a data lake. What is an efficient way to analyze it?",
        "choices": [
          "Convert it into CSV and open in pandas",
          "Use Spark or DuckDB with Parquet files for querying",
          "Copy data into a text editor",
          "Load it all into Excel"
        ],
        "answer_index": 1,
        "topic": "data_analysis"
      }
    ],
    "natural_language_processing": [
      {
        "id": "nlp_1",
        "question": "How can you fine-tune a large language model on a small dataset without overfitting?",
        "choices": [
          "Train all parameters from scratch",
          "Use adapter layers (LoRA) or partial fine-tuning",
          "Increase learning rate to speed up training",
          "Use only unsupervised text pretraining"
        ],
        "answer_index": 1,
        "topic": "natural_language_processing"
      },
      {
        "id": "nlp_2",
        "question": "Which model handles multiple languages well for text classification?",
        "choices": [
          "Naive Bayes on English text",
          "English-only BERT",
          "XLM-RoBERTa multilingual model",
          "TF-IDF with one language per file"
        ],
        "answer_index": 2,
        "topic": "natural_language_processing"
      }
    ]
  },
  "coding": {
    "id": "code1",
    "language": "python",
    "function_name": "foo",
    "title": "Group keys by frequency k",
    "prompt": "Given a dictionary where keys are alphabets and values are integers, and a value k, write a dynamic Python function that works for any such dictionary of arbitrary length 0 < n < 1000 and returns the expected output based on the value of k.\n\ninput_dict = {\"a\":8, \"b\":5, \"c\":8, \"d\":4, \"e\":7, \"f\":7, \"g\":1, \"h\":9, \"j\":3}\nk=2\n#output for k=3 []\n#output for k=2 [['a', 'c'], ['e', 'f']]\n#output for k=1 [['b'], ['d'], ['g'], ['h'], ['j']]",
    "function_signature": "def foo(input_dict, k):\n    # Write your code here\n",
    "reference_tests": [
      {
        "input_dict": {"a":8, "b":5, "c":8, "d":4, "e":7, "f":7, "g":1, "h":9, "j":3},
        "k": 3,
        "expected": []
      },
      {
        "input_dict": {"a":8, "b":5, "c":8, "d":4, "e":7, "f":7, "g":1, "h":9, "j":3},
        "k": 2,
        "expected": [["a", "c"], ["e", "f"]]
      },
      {
        "input_dict": {"a":8, "b":5, "c":8, "d":4, "e":7, "f":7, "g":1, "h":9, "j":3},
        "k": 1,
        "expected": [["b"], ["d"], ["g"], ["h"], ["j"]]
      },
      {
        "input_dict": {"x":2, "y":2, "z":2, "w":3},
        "k": 3,
        "expected": [["x", "y", "z"]]
      }
    ]
  }
}
